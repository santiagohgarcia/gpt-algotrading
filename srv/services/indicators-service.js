import { RSI, SMA, MACD, BollingerBands, ADX, ATR, Stochastic, PSAR, /*OBV,  setConfig*/ } from 'technicalindicators';

class IndicatorsService {

    static getInstance() {
        if (!this.instance) {
            this.instance = new IndicatorsService();
            // setConfig("precision", 5)
        }
        return this.instance;
    }

    //List of possible indicators according to:
    //https://chatgpt.com/share/67533bd8-b768-8011-9087-4a695951e65f

    async addIndicatorsToBars(bars) {

        // SMA/EMA (10, 50)
        const smaShort = new SMA({
            period: 10,
            values: []
        });

        const smaLong = new SMA({
            period: 50,
            values: []
        });

        // RSI (14)
        const rsi = new RSI({
            period: 14,
            values: []
        });

        // MACD (12, 26, 9)
        const macd = new MACD({
            fastPeriod: 12,
            slowPeriod: 26,
            signalPeriod: 9,
            SimpleMAOscillator: false,
            SimpleMASignal: false,
            values: []
        })

        //ADX
        const adx = new ADX({
            period: 14,
            high: [],
            low: [],
            close: []
        })

        //Bolinger Bands (20,2)
        const bb = new BollingerBands({
            period: 20,
            stdDev: 2,
            values: []
        })

        //ATR
        const atr = new ATR({
            period: 14,
            high: [],
            low: [],
            close: []
        })

        //Stochastic Oscillator (14, 3)
        const so = new Stochastic({
            period: 14,
            signalPeriod: 3,
            high: [],
            low: [],
            close: []
        })

        // //OBV - On-Balance Volume
        // const obv = new OBV({
        //     volume: [], 
        //     close: []
        // })

        // SMA/EMA (10, 50)
        const volumeSMA = new SMA({
            period: 20,
            values: []
        });

        // Parabolic SAR (0.02, 0.2)
        const psar = new PSAR({
            high: [],
            low: [],
            step: 0.02,
            max: 0.2
        })


        return bars.reverse().map(bar => {
            bar.indicators = {
                "SMA(period=10)": smaShort.nextValue(bar.close),
                "SMA(period=50)": smaLong.nextValue(bar.close),
                "RSI(period=14)": rsi.nextValue(bar.close),
                "MACD(fastPeriod=12,slowPeriod=26,signalPeriod=9)": macd.nextValue(bar.close),
                "BolingerBands(period=20,stdDev=2)": bb.nextValue(bar.close),
                "ADX(period=14)": adx.nextValue({
                    close: bar.close,
                    high: bar.high,
                    low: bar.low
                }),
                "ATR(period=14)": atr.nextValue({
                    close: bar.close,
                    high: bar.high,
                    low: bar.low
                }),
                "Stochastic(period=14,signalPeriod=3)": so.nextValue({
                    close: bar.close,
                    high: bar.high,
                    low: bar.low
                }),
                "VolumeSMA(period=20)": volumeSMA.nextValue(bar.volume),
                "PSAR(step=0.02,max=0.2)": psar.nextValue({
                    high: bar.high,
                    low: bar.low
                })
            };

            this.applyToFixed(bar.indicators);

            return bar;
        }).reverse();

    }

    //Generated by GPT
    applyToFixed(obj) {
        // Iterate through each property of the object
        for (let key in obj) {
            if (typeof obj[key] === "number") {
                // If the value is a number, apply .toFixed(2)
                obj[key] = parseFloat(obj[key].toFixed(2));
            } else if (typeof obj[key] === "object" && obj[key] !== null) {
                // If the value is an object, recursively call the function
                this.applyToFixed(obj[key]);
            }
        }
        return obj;
    }

}

export default IndicatorsService;